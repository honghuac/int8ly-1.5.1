---
- name: Delete existing alerts
  shell: "oc delete prometheusrule backup-monitoring-alerts -n {{ monitoring_namespace }}"
  register: delete_alerts_cmd
  failed_when: delete_alerts_cmd.stderr != '' and 'NotFound' not in delete_alerts_cmd.stderr
  changed_when: delete_alerts_cmd.rc == 0

- include_role:
    name: backup
    tasks_from: monitoring
  when: delete_alerts_cmd.rc == 0

# Backup namespace cronjobs
- name: get all cronjobs
  shell: "oc get cronjobs -o custom-columns=NAME:{.metadata.name} --no-headers -n {{ backup_namespace }}"
  register: cronjobs_result

- set_fact:
    cronjobs: "{{ cronjobs_result.stdout.splitlines() }}"

- name: "patch all cronjobs in {{ backup_namespace }} namespace"
  shell: "oc patch cronjob {{ item }} -n {{ backup_namespace }} --patch='[{\"op\": \"add\", \"path\": \"/spec/jobTemplate/spec/template/spec/containers/0/image\", \"value\": \"{{ upgrade_backup_container_image }}\"}]' --type=json"
  register: upgrade_cronjob
  failed_when: upgrade_cronjob.stderr != '' and 'not patched' not in upgrade_cronjob.stderr
  with_items: "{{ cronjobs }}"

# Cluster SSO namespace cronjobs
- name: Change backup CronJob name in Keycloak CR to include namespace suffix
  shell: "oc patch keycloak rhsso -n {{ rhsso_namespace }} --type json -p '[{\"op\":\"replace\",\"path\":\"/spec/backups/0/image_tag\",\"value\":\"{{ upgrade_backup_container_tag }}\"}]'"
  register: patch
  failed_when: patch.rc != 0

# User SSO namespace cronjobs
- name: Change backup CronJob name in Keycloak CR to include namespace suffix
  shell: "oc patch keycloak rhsso -n {{ user_rhsso_namespace }} --type json -p '[{\"op\":\"replace\",\"path\":\"/spec/backups/0/image_tag\",\"value\":\"{{ upgrade_backup_container_tag }}\"}]'"
  register: patch
  failed_when: patch.rc != 0

# Verify cronjobs
- name: Verify all middleware cronjobs use new image
  shell: "oc get cronjobs --selector='monitoring-key=middleware' -o custom-columns=NAME:{.spec.jobTemplate.spec.template.spec.containers[0].image} --no-headers --all-namespaces | sed 's|{{ upgrade_backup_container_image }}||g'"
  register: result
  until: result.stdout | replace('\n', '') | length == 0
  changed_when: False
